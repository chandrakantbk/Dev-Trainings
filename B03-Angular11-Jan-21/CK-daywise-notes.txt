##Day 01: Introduction [25-JAN-2021]

2010: AngularJS developed by Misko Hevery, a employee at Google
2014-2015: Re-written the AngularJS using Typescript and became Angular 2

Angular is a framework for frontend development. 

Diff Framework Vs library is - 
Framework: Provides Structure (and Functionalities) and keeps the programs flow control
Library: Provides Functionalities and developer decides the program flow control

To start with Angular, you need to download/install followings

0. Node.js : NPM
1. npm install -g @angular/cli: Angular 11
2. Visual Code

=================================================================================

##Day 02: Starting Project [26-JAN-2021]

Install specific version:

npm install -g @angular/cli@8.3.17

ng new <ProjectName>

ng serve --open
------------------------------------------------
#Further Reading: Keywords 
angular/cli 
node.js 
npm 

------------------------------------------------
#Tasks
1. Install Angular and Create a Project called Portfolio

ng new Portfolio
ng serve 

=================================================
#Day 03: Understanding Angular Project and component [27-JAN-2021]

Project structure 

Portfolio 
    |
    |-src
        |
        |-app
            |
            |-app.component.html
            |-app.component.css

Angular run on port 4200 by default.
We can change that port using a flag --port <portNumber>
            ng serve 
            ng serve --port 5000
            npm start
-main.ts: Entry point for angular app  
-test.ts: Entry Point for test 
-package.lock.js: list of packages and dependencies
-package.js: list of used packages

Command to generatte component: 

ng generate component <componentName>

Keywords to read more about:
main.ts 
AppModule
AppComponent
MVVM
 
Module [may have more than one components]
    -component [is made up of 4 files]
        -html
        -css 
        -spec.ts 
        -ts
Ex: 
AppModule 
    AppComponent
    component-homepage 
    component-cantactus
    component-menubar

==========================
Day 04: Revising Prerequisites [HTML]

CRP: Critical Rendering path 

1. DOM 
2. CSSOM 
3. Render tree
4. Layout 
5. Paint

-CSS is Render Blocking
-JS is Parser Blocking
-JS Runs after CSSOM Event and (might be) before DOM construction
-Render tree get formed only after DOM and CSSOM is ready

=========================================================
Day 05: Revising Prerequisites [CSS3]

CSS Selectors: Used to select the perticular element from DOM.

Some Basic Selectors:
*          : Global selector, selects all the elements in current document
tagname    : Tag selector, selects all elements of that perticuar tag 
.className : Class Selector, selects the element having the className applied
#id        : Id Selector, select the element with having the perticular id 

==========================================================
Day 06: Revising Prerequisites [CSS3 Properties] [30-Jan-2021]

List of some important css Properties
-------------------
display: inline | block | inline-block | none | flex | grid | table | table-cell 
position: relative | absolute | fixed | sticky | static 
margin: <top> <right> <bottom> <left>;
border-radious 
border-style 
border-color
border-width 
background-* 
color 
text-align 
font-family
font-size 
font-style
line-height

@font-face {
    font-family: <fontName>;
    src: url("fonts/fontName.ttf") format("opentype");
}
@import "path/name.css";
===========================================================
Day 07: Revising Prerequisites [CSS3 Properties] [01-Feb-2021]

Examples on position: relative | absolute | fixed | sticky | static 

absolute: the top, left, right and bottom is calcuated from the parents border(whose position is not static); if position is not set on parent element, it keep searching till any parent has position set other than "static", and reaches to html tag if no one parent match.

relative: the top, left, right and bottom calcuates from current elements border.


===========================================================

Day 08: Revising Prerequisites [CSS3 Properties] [02-Feb-2021] - postponed

===========================================================

Day 09: CSS display, fonts and bootstrap [Revisiting Prerequisites] [03-Feb-2021]

display: flex 
 - You can align items inside the flex box using justify-content and align-items.
 - justify-content works on main axis (usually default the horizontal, X axis)
 - align-items works on cross axis(usually default in vertical direction, Y axis)
 

Read: 
bootstrap classes
css selectors 
css flex
css grid


display: none
display: inline 
display: block 
display: inline-block 
display: flex 
display: grid  

===========================================================

Day 10: JavaScript(ES6) [Revisiting Prerequisites] [04-Feb-2021]


var a = 10 // number
var a = `pune` // string 
var flag = true // boolean 
var g; // undefined
var hNum = 100820059803988520258520028520285202585202585202585202582025820025820025852n // BigInt
NaN 
null 
Array 
Object 

var arr = [ ] //array literal 

var arr2 = new Array()

var obj = { } // object literal


var name = "Akshay";
var age = 25;
var city = "City"

var marks = [50, 60, 85, 30]
              0   1   2   3
              
var ak_record = {name:  "Akshay", age: 25, city: "Pune", m: [50,60,85,30] }

ak_record.m // [50,60,85,30]

ak_record.m[0]

var records = ["BLR", false, 50, null, [405, 505, 60], {name:  "Akshay", age: 25, city: "Pune", m: [50,60,85,30] } ]

// access values using index numbers
records[1]
records[0] = "BLR"

Array.isArray( records[4]  )  // true


typeof marks //  "object"

var student_list = [];


student_list[5] = {name: "akshay", city: "pune"}


student_list[0] // undefined 

for(assignment; condition; callback-expression){

}

for(var index = 0; check() ; increment() ){
    console.log(index)
}

while( check() ){

}

do{ 
  
}while()

if(i < 50) console.log("valid")
var num = 50

if(num < 50) {  
    console.log("valid") 

} else if(k < 20){ 
    //
}


if( -10 ){
    // statement
}

var t = 50 + 60 // 110

a + b  // 

var y = 50;

// Falsy
-------------
0
null 
undefined 
""
NaN 
false 

// Truthy
[]
{}
50
-50
true 
" "

var name = " "
var emArr = []

if(name){
    // this will execute
}

// Whats next
for - in 
for - of 
object 
array 
Math 
Date 

====================================

Day 11: JS for loop, array and object (ES6) [Revisiting Prerequisites] [08-Feb-2021]

// iterates over and gets keys in k
for(let k in array_or_obj  ){
    console.log( k ) // key name 
    console.log( array_or_obj[ k ] ) // value of the key 
}

// iterates over and get values in v
for(let v of array_iterable){
     console.log( v ) // key's value | array value 
}

=============================================

Day 12: JS array and object (ES6)

-order in object is not same if keys are identical to numbers. 
-The number keys will be aranged in ascending order

var obj=  {
    "name": "CK"
    "0": 10
}

=======================================================

Day 13: JS array and object (ES6)

-Checking element in the Array

var arr [50, 30, 12, 50, 60]

arr.includes(30) // true 
arr.indexOf(50) // 0  tells index from begin, if not found in array then will return -1
arr.lastIndexOf(50) // 3 

// find method used to find the first matched element based on function
// returns array item, here it will return 12

arr.find( function(elm){
    if(elm % 3 == 0){ 
        return true
    } else {
        return false
    }
 })

// filter method: return all matched elements. return array of matched array items 

arr.filter(function(e){
    if(e % 10 == 0){
        return true
    } else{ 
        return false 
    }
})

// returns [50, 30, 50, 60]


Sort method: compares next value with current. callback function should return as below:

if current value is less: -1
if current and next values are same: 0
if current value is greter than next: 1

arr.sort() //sorts array in ascending array

arr.reverse() // reverse the entire array 

========================================================
Day 15: Understanding components

Create New Project: ng new ProjectName 
 
strict checking : Y/N 
Routing: Y 
Stylesheet: CSS 


Create Component using command: ng g c componentName


Following is Angular project structure
-----------------------------
ProjectName(project folder)
    |-e2e           : testing code goes here
    |-node_modules  : NPM packages 
    |-src           : application source code goes here
        |
        |-app(module)
            module.ts 
            component: ng generate component <componentName>

            module[product]
                | proctuts.module.ts 
                |-components
                |
            module[admin]
                |-admin.module.ts
                |

--------------------------------------------------

module [login module]
    |- <modulename>.module.ts : things about the module, used references and component list 
                    component1, component2

    |-<modulename>.routing.ts

    |-component1: login-page
    |-component2: reset-password-page
    |-forget-password
        |
        |-template file (html files)
        |-Stylesheet file (css files)
        |-typescript file (ts files)
        |-spect.ts

Routing example:
[
    { path: 'login', component: LoginComponent },
]

example.com/login
example.com/reset-password
example.com/forget-password

====================================================
Day 16: One way binding [13-Feb-2021]
    -String Interpollation ( using default {{  }} )
    -Property Binding    <input [propertyName]="varName">
    -Attribute Binding   <input [attr.attributeName]="varName">
    -Style Binding       <div [style.color]="varName">
    -Class Binding       <div [class.success]="booleanVar">

===================================================
Day 17: Bootstrap and Two way binding [15-Feb-2021]

Using Two way binding steps

1. Go to app.module.ts file 
2. add FormsModule in the import array like below 

    imports: [
        BrowserModule,
        AppRoutingModule,
        FormsModule  // here we added forms module
    ],

Using Bootstrap steps:

1. npm install bootstrap
2. copy bootstrap's relative path from node_modules folder 
3. Edit angular.json file.
    -find styles array and add your path like below.
        styles: [
            "node_modules/bootstrap/dist/css/bootstrap.min.css",
            "src/styles.css"
        ]

===================================================
Day 18: Recap Everything - Making a Portfolio Finally [16-Feb-2021]

==============================================
Day 19: Angular Event Binding and Basic Examples [17-Feb-2021]

<button (click)="handlerMethod($event)">

- here $event is a special variable in which angular exposes event payload data 
- ( EventName ) = "functionToHandleEvent()"

==============================================
Day 20: Angular Event Binding - Practice [18-Feb-2021]

==============================================

Day 21: Component's Communication - [Parent-Child] 

app.component [Parent]
    |-product-item [Child]

app.component.html 
    <parent-item [customPropertyName]="variableFromAppComponent"> </parent-item> 

- we can take any value from parent component using [] property binding syntax. 
- Need to define the customPropertyName inside product-item.component.ts file using @Input

product-item.component.ts

    @Input('customPropertyName') customPropertyName:any;

==============================================

App module 
    1. app.component 
    2. product-item 
    3. card

<div [innerText]="varible"> </div>

<button ()="">

app.component [Parent]
    |-product-item [Child]
        |-card [child of product item]

app.component.html [TS -variable ]
    <product-item [propertyName]="variable" (onChildChange)> [TS]
                                    | @Input('propertyName')
                                      @Output() onChildChange = new EventEmmiter()

        product-item.html 
            <card>
===================================
Day 28: ngNonBindable, ngClass and ngStyle [1-March-2021]

<div [ngStyle]="{'color': 'green',  'font-size.px': 10}">
    text
</div>

<ul>
    <li *ngFor="let item of student_list">
        <span [ngStyle]="{'color': item.city == 'pune' ? 'green' : 'red' }">
      {{ item.name }} :: {{ item.city }}
    </span>
    </li>
</ul>

<pre ngNonBindable>{{ text_1 }}</pre>

=================================================
Day 29: Angualar lifecycle [2-March-2021]

ngOnChanges - called when an input binding value changes
ngOnInit - after the first ngOnChanges
ngDoCheck - after every run of change detection
ngAfterContentInit - after component content initialized
ngAfterContentChecked - after every check of component content
ngAfterViewInit - after component's view(s) are initialized
ngAfterViewChecked - after every check of a component's view(s)
ngOnDestroy - just before the component is destroyed


================================
Day 38


UI ==> Angular 

API ==> Python (Application) = > backend  

GET    api/get/city
[
    {name: 'SK', city: 'Pune'}, 
    {name: 'Anu', city: 'Pune'}
]


table
    Name      City                  Action Button

    Test1     test city             Edit    Delete 



<tr *ngFor = "let item of student_aary">
    <td>{{ item.name  }}</td>
    <td>{{ item.city }} </td>
    <td> rdit delete </td>
</tr>


var student_aary;

this.http.get('http://skapi.com/api/get/city').subscribe( (data)=>{
    this.student_aary = res;
})

